Описание архитектуры:
PersonLibrary представляет библиотеку включающую два класса выполняющих основную бизнес логику и папку с моделями для БД. 
Для подключения к базе данных sqlite используется микро-ORM Dapper (прост в использовании, легковесный, быстрый).
В классе SqliteDataAccess содержится ряд методов для подключения и взаимодействия с базой данных. Можно заметить что в методах используется класс
PersonMainModel - это родительский класс для всех моделей. Используется для более абстрактного взаимодействия с базой данных.
Облегчает возможность добавления новых классов моделей. SqliteDataAccess покрыт тестами в проекте PersonLibraryTest.SqliteDataAccessTest
В классе CalculateSalary производится расчет зароботной платы 3-х типов сотрудников, внутри содержатся три закрытых метода и один
публичный getSalaryWithPercentage который в параметре принимает все модели которые наследуются от PersonMainModel.
В результате выполнения возвращает ЗП конкретного сотрудника с процентами указанными в ТЗ. 
Класс покрыт тестами в PersonLibraryTest.CalculateSalaryTest. Для тестирования используется xunit.

Основной ход выполнения (полная реализация): 
1. Метод SqliteDataAccess.LoadAllPersons() выводит всех сотрудников с базовыми данными из БД.
	(Возможно это будет таблица, в которой имя будет ссылкой на данные конкретного пользователя)
2. При нажатии ссылки отображаются полные детали пользователя включая зп с процентами 
	(для этого вызывается метод SqliteDataAccess.GetPersonById(int personID, string groupID) результат которого передается в
	CalculateSalary.getSalaryWithPercentage(PersonMainModel personMain))

Проект лучше построить по шаблону MVC, где будет явное разграничение визуальной части от бизнес логики, управлением будет заниматься
контроллер по соответствующим ресурсам и типам запросов. Также можно будет добавить авторизацию пользователей, разграничить доступ
по ролям (admin, user) и расширить функционал PersonLibrary, где добавится возможность назначение подчиненых.

Второй вариант оформить все как WebApi, а визуальную часть реализовать на предпочитаемом фреймворке React/Vue и т.д

Относительно базы данных, можно провести анализ количества данных и быстродействия. Возможно нужно будет заменить БД.